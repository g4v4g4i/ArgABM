; the run-many procedure is used to obtain results
; it lets the program run several times for a few
; setups at once
; the results are put into a .txt file that can be
; used for comparison and making plots for papers/slides





; the procedure that lets the program run several times
to run-many
  clear-all
  let try 0  ; the number of the run with the same setup
  let cycle 0  ; the number of ticks
  let max-cycle 0  ; time limit for one try/run
  ; lists that collect for each setup the percentage of
  ; discovered arguments (of the best theory)
  let perc-disc-argu []
  let perc-disc-best-argu []
  let find-good-m 0  ; number of successful runs, monist
  let find-good-p 0  ; number of successful runs, pluralist
  let steps-needed []  ; time steps needed for one run
  let popularity []  ; list with the number of researchers per theory
  let tot-arguments 0  ; the total number of arguments
  set number-of-theories-many 2  ; initial number of theories
  set theory-depth-many 3  ; initial depth
  set scientists-many 10  ; initial number of scientists
  let disc-arguments 0  ; number of discovered arguments
  let disc-best-arguments 0  ; number of discovered best arguments
  let tot-best-arguments 0  ; total number of best arguments
  let jumps 0  ; number of jumps

  ; different setups write results to different files
  ifelse network-structure = "cycle" [
    ifelse social-actions = "biased" [
      ifelse within-theory [
        file-open "Resultscycb_within.txt"
      ][
      file-open "Resultscycb_off.txt"
      ]
    ][
    ifelse within-theory [
      file-open "Resultscycr_within.txt"
    ][
    file-open "Resultscycr_off.txt"
    ]
    ]
  ][
  ifelse network-structure = "wheel" [
    ifelse social-actions = "biased" [
      ifelse within-theory [
        file-open "Resultswhb_within.txt"
      ][
      file-open "Resultswhb_off.txt"
      ]
    ][
    ifelse within-theory [
      file-open "Resultswhr_within.txt"
    ][
    file-open "Resultswhr_off.txt"
    ]
    ]
  ][
  if network-structure = "complete" [
    ifelse social-actions = "biased" [
      ifelse within-theory [
        file-open "Resultscomb_within.txt"
      ][
      file-open "Resultscomb_off.txt"
      ]
    ][
    ifelse within-theory [
      file-open "Resultscomr_within.txt"
    ][
    file-open "Resultscomr_off.txt"
    ]
    ]
  ]
  ]
  ]

  ; the settings from the interface are
  ; written in the .txt files
  file-write "New run for results times "
  file-print date-and-time
  file-print ""
  file-write "Probability of attacks towards the best theory"
  file-print attack-probability-best
  file-print ""
  file-write "Probability of attacks towards the sencond theory:"
  file-print attack-probability-2nd
  file-print ""
  file-write "Probability of attacks towards the thrid theory:"
  file-print attack-probability-3rd
  file-print ""
  file-write "Probability that new arguments pop-up: "
  file-print visibility-probability
  file-print ""
  file-write "Change that an researcher moves to the next argument: "
  file-print move-probability
  file-print ""
  file-write "Threshold of best values for strategies"
  file-print strategy-threshold
  file-print ""
  file-write "Number of times an researchers has to consider jumping before jumping: "
  file-print jump-threshold
  file-print ""
  file-write "Number of steps before the color of an argument changes: "
  file-print research-speed
  file-print ""
  file-write "Network structure of the collaborator-networks: "
  file-print network-structure
  file-print ""
  file-print "actions, within theory: "
  file-print social-actions
  file-print within-theory
  file-print ""
  file-print ""
  file-print ""

  while [number-of-theories-many != 4][
    while [theory-depth-many != 4][
      set setup-time []
      set setup-discovered []
      set setup-successful-m []
      set setup-successful-p []
      set setup-discovered-best []
      set setup-jumps []
      clear-turtles
      create-discovery-landscape number-of-theories-many theory-depth-many
      set tot-arguments count turtles with [breed = arguments or breed = starts]
      set max-cycle precision (15 * tot-arguments) -3

      while [scientists-many <= 100][
        while [try != 100][

          ; to keep track of the current setup of the run
          write "#theories, depth, scientists, actions, structure, within-theory, try: "
          print ""
          show number-of-theories-many
          show theory-depth-many
          show scientists-many
          show social-actions
          show network-structure
          show within-theory
          show try

          setup-many
          set cycle 1
          go
          ; the program is stopped once all researchers are working
          ; on a fully discovered theory
          while [cycle != max-cycle and any? arguments with [color != red and
            [myscientists] of mytheory !=  0]][
            go
            set cycle cycle + 1
          ]

          set steps-needed lput cycle steps-needed
          ; compute researcher distribution over the theories
          ask starts [
            set popularity lput myscientists popularity
          ]
          ask start 0 [
            if max popularity = myscientists and max popularity = scientists-many [
              set find-good-m find-good-m + 1
            ]
            if max popularity = myscientists [
              set find-good-p find-good-p + 1
            ]
          ]
          ask researchers [
            set jumps times-jumped + jumps
          ]

          ; for the computation of the output
          set disc-arguments count turtles with [(breed = arguments or
      breed = starts) and color != gray and color != turquoise]
          set disc-best-arguments count turtles with [(breed = arguments or
      breed = starts) and color != gray and color != turquoise and
      mytheory = start 0]
          set tot-best-arguments count turtles with [(breed = arguments or
      breed = starts) and mytheory = start 0]
          set perc-disc-argu lput ((disc-arguments / tot-arguments) * 100)
      perc-disc-argu
          set perc-disc-best-argu lput ((disc-best-arguments /
      tot-best-arguments) * 100) perc-disc-best-argu
          set popularity []
          set colla-networks []
          set share-structure []
          set try try + 1
        ]

        ; add the results from the current setup to the
        ; list of already obtained results
        set setup-time lput mean steps-needed setup-time
        set setup-successful-m lput ((find-good-m / try) * 100)
    setup-successful-m
        set setup-successful-p lput ((find-good-p / try) * 100)
    setup-successful-p
        set setup-discovered lput mean perc-disc-argu
    setup-discovered
        set setup-discovered-best lput mean perc-disc-best-argu
    setup-discovered-best
        set setup-jumps lput ((jumps / try) / scientists-many)
    setup-jumps

        ; reset some of the variables
        set try 0
        set perc-disc-argu []
        set perc-disc-best-argu []
        set find-good-m 0
        set find-good-p 0
        set steps-needed []
        set disc-arguments 0
        set disc-best-arguments 0
        set tot-best-arguments 0
        set jumps 0
        ifelse scientists-many < 40[
          set scientists-many scientists-many + 10
        ][
        set scientists-many scientists-many + 30
        ]
      ]

      ; add the results to the file
      file-write "Time, successful, discovered, discovered of best, jumps: "
      file-print ""
      file-write "time"
      file-type number-of-theories-many
      file-type theory-depth-many
      file-type " = "
      file-print setup-time
      file-write "suc-m"
      file-type number-of-theories-many
      file-type theory-depth-many
      file-type " = "
      file-print setup-successful-m
      file-write "suc-p"
      file-type number-of-theories-many
      file-type theory-depth-many
      file-type " = "
      file-print setup-successful-p
      file-write "disc"
      file-type number-of-theories-many
      file-type theory-depth-many
      file-type " = "
      file-print setup-discovered
      file-write "discb"
      file-type number-of-theories-many
      file-type theory-depth-many
      file-type " = "
      file-print setup-discovered-best
      file-write "jumps"
      file-type number-of-theories-many
      file-type theory-depth-many
      file-write " = "
      file-print setup-jumps
      file-print ""
      file-print ""
      file-print ""
      file-print ""
      set scientists-many 10
      set theory-depth-many theory-depth-many + 1
    ]
    set theory-depth-many 3
    set number-of-theories-many number-of-theories-many + 1
  ]
  let k 0
  while [k < 6][
    ifelse k mod 6 = 0 [
      ;file-print "plot x, time23, 'x--r', x, time24, 'p:m', x, time33, '^-.k', x, time34, '*-c');"
      ;file-print "legend ($th2, depth 3$, $th2, depth 4$, $th3, depth 3$, $th3, depth 4$);"
      file-print "plot (x, time23, 'x--r', x, time33, '^-.k');"
      file-print "legend ($th2, depth 3$, $th3, depth 3$);"
      file-print "ylabel ($Time-steps needed$);"
      file-print "axis ([5, 105, 0, 1000]);"
      file-write "title ($Time needed for: "
    ][
    ifelse k mod 6 = 1 [
      ;file-print "plot (x, suc23, 'x--r', x, suc24, 'p:m', x, suc33, '^-.k', x, suc34, '*-c');"
      file-print "plot (x, suc-m23, 'x--r', x, suc-m33, '^-.k');"
      file-print "ylabel ($Number of successful runs$);"
      file-print "axis ([5, 105, 0, 105]);"
      file-write "title ($Monist success for: "
    ][
    ifelse k mod 6 = 2 [
      ;file-print "plot (x, suc23, 'x--r', x, suc24, 'p:m', x, suc33, '^-.k', x, suc34, '*-c');"
      file-print "plot (x, suc-p23, 'x--r', x, suc-p33, '^-.k');"
      file-print "ylabel ($Number of successful runs$);"
      file-print "axis ([5, 105, 0, 105]);"
      file-write "title ($Pluralist success for: "
    ][
    ifelse k mod 6 = 3 [
      ;file-print "plot (x, disc23, 'x--r', x, disc24, 'p:m', x, disc33, '^-.k', x, disc34, '*-c');"
      file-print "plot (x, disc23, 'x--r', x, disc33, '^-.k');"
      file-print "ylabel ($Percentage of discovered arguments$);"
      file-print "axis ([5, 105, 0, 105]);"
      file-write "title ($Percentage discovered arguments for: "
    ][
    ifelse k mod 6 = 4[
      ;file-print "plot (x, discb23, 'x--r', x, discb24, 'p:m', x, discb33, '^-.k', x, discb34, '*-c');"
      file-print "plot (x, discb23, 'x--r', x, discb33, '^-.k');"
      file-print "ylabel ($Percentage of discovered arguments, best theory$);"
      file-print "axis ([5, 105, 0, 105]);"
      file-write "title ($Percentage discovered arguments, best theory, for: "
    ][
    ;file-print "plot (x, jumps23, 'x--r', x, jumps24, 'p:m', x, jumps33, '^-.k', x, jumps34, '*-c');"
    file-print "plot x, jumps23, 'x--r', x, jumps33, '^-.k');"
    file-print "ylabel ($Average number of jumps per researcher$);"
    file-print "axis ([5, 105, 0, 2.5]);"
    file-write "title ($Average number of jumps per researcher for: "
    ]
    ]
    ]
    ]
    ]
    file-write social-actions
    file-write "researchers, within th.: "
    file-write within-theory
    file-print "$);"
    if k mod 5 != 0 [
      ;file-print "legend ($th2, depth 3$, $th2, depth 4$, $th3, depth 3$, $th3, depth 4$, $location$, $southeast$);"
      file-print "legend ($th2, depth 3$, $th3, depth 3$, $location$, $southeast$);"
    ]
    file-print "xlabel ($Number of scientists$);"
    file-print ""
    file-print ""
    file-print ""
    file-print ""
    file-print ""
    set k k + 1
  ]
  file-flush
end





; the setup for a run-many
to setup-many
  ; instead of clear-all, the globals should not be cleared
  setupcore [ [] ->
    clear-turtles
    clear-patches
    clear-drawing
    clear-all-plots
    clear-output
   ]
  number-of-theories-many theory-depth-many scientists-many
end





to end-run-commands
  let popularity []
  let find-good-m 0
  let find-good-p 0
  let jumps 0
  ask starts [
    set popularity lput myscientists popularity
  ]
  ask start 0 [
    if max popularity = myscientists and max popularity = scientists-many [
      set find-good-m true
    ]
    if max popularity = myscientists [
      set find-good-p true
    ]
  ]
  ask researchers [
    set jumps times-jumped + jumps
  ]
end
